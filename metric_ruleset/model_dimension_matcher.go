/*
Metric Ruleset API

Metric ruleset API 

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metric_ruleset

import (
	"encoding/json"
)

// DimensionMatcher Dimension metric matcher 
type DimensionMatcher struct {
	// Matcher rule type 
	Type string `json:"type"`
	// List of filters you want to apply to your metric 
	Filters []PropertyFilter `json:"filters,omitempty"`
}

// NewDimensionMatcher instantiates a new DimensionMatcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensionMatcher(type_ string) *DimensionMatcher {
	this := DimensionMatcher{}
	this.Type = type_
	return &this
}

// NewDimensionMatcherWithDefaults instantiates a new DimensionMatcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionMatcherWithDefaults() *DimensionMatcher {
	this := DimensionMatcher{}
	return &this
}

// GetType returns the Type field value
func (o *DimensionMatcher) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DimensionMatcher) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DimensionMatcher) SetType(v string) {
	o.Type = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DimensionMatcher) GetFilters() []PropertyFilter {
	if o == nil || isNil(o.Filters) {
		var ret []PropertyFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionMatcher) GetFiltersOk() ([]PropertyFilter, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DimensionMatcher) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []PropertyFilter and assigns it to the Filters field.
func (o *DimensionMatcher) SetFilters(v []PropertyFilter) {
	o.Filters = v
}

func (o DimensionMatcher) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableDimensionMatcher struct {
	value *DimensionMatcher
	isSet bool
}

func (v NullableDimensionMatcher) Get() *DimensionMatcher {
	return v.value
}

func (v *NullableDimensionMatcher) Set(val *DimensionMatcher) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionMatcher(val *DimensionMatcher) *NullableDimensionMatcher {
	return &NullableDimensionMatcher{value: val, isSet: true}
}

func (v NullableDimensionMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


