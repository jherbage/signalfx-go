/*
Metric Ruleset API

Metric ruleset API 

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metric_ruleset

import (
	"encoding/json"
	"fmt"
)

// MetricAggregator - Metric aggregator 
type MetricAggregator struct {
	RollupAggregator *RollupAggregator
}

// RollupAggregatorAsMetricAggregator is a convenience function that returns RollupAggregator wrapped in MetricAggregator
func RollupAggregatorAsMetricAggregator(v *RollupAggregator) MetricAggregator {
	return MetricAggregator{
		RollupAggregator: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MetricAggregator) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RollupAggregator
	err = newStrictDecoder(data).Decode(&dst.RollupAggregator)
	if err == nil {
		jsonRollupAggregator, _ := json.Marshal(dst.RollupAggregator)
		if string(jsonRollupAggregator) == "{}" { // empty struct
			dst.RollupAggregator = nil
		} else {
			match++
		}
	} else {
		dst.RollupAggregator = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RollupAggregator = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MetricAggregator)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MetricAggregator)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MetricAggregator) MarshalJSON() ([]byte, error) {
	if src.RollupAggregator != nil {
		return json.Marshal(&src.RollupAggregator)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MetricAggregator) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RollupAggregator != nil {
		return obj.RollupAggregator
	}

	// all schemas are nil
	return nil
}

type NullableMetricAggregator struct {
	value *MetricAggregator
	isSet bool
}

func (v NullableMetricAggregator) Get() *MetricAggregator {
	return v.value
}

func (v *NullableMetricAggregator) Set(val *MetricAggregator) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricAggregator) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricAggregator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricAggregator(val *MetricAggregator) *NullableMetricAggregator {
	return &NullableMetricAggregator{value: val, isSet: true}
}

func (v NullableMetricAggregator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricAggregator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


